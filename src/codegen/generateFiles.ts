import prettier from 'prettier'
import { capitalize, log } from '../utils'
import { CategorisedAddressImport } from './buildCategorisedAddressImports'
import { FileDescriptionsByCategory } from './buildFileDescriptions'
import { zx } from '../zodx'

const preamble = '// THIS FILE IS AUTOGENERATED - DO NOT EDIT'
const defaultImportLabel = `import { Address, isAddress } from "./address"`

const ethersImportLabel = (
  importBigNumber: boolean,
) => `import type { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
${importBigNumber ? `import { BigNumber } from "ethers"` : ''}`

const contractFactoryImportLabel = (
  contractFactory: string,
  contract: string,
) => `import { ${contractFactory}, ${contract} } from "./contracts"`

const addressImportLabel = ({
  path,
  addressConstants,
  addressType,
}: CategorisedAddressImport) =>
  `import { ${addressConstants.join(
    ', ',
  )} } from "${path}"\nimport type { ${addressType} } from "${path}"`

const addressTypeLabel = (addressType: string) =>
  `export type ${addressType} = Address & { readonly ${addressType}: unique symbol }`

const addressConstLabel = (
  address: zx.Address,
  addressConstant: string,
  addressType: string,
) => `export const ${addressConstant} = "${address}" as ${addressType}`

const addressListLabel = (category: string, addressConsts: string[]) =>
  `export const ${category}List = [\n${addressConsts.join(',\n')}]`

const addressGuardLabel = (
  category: string,
  addressType: string,
  isUnique: boolean,
  addressConsts: string[],
) =>
  `export const is${addressType} = (address: string): address is ${addressType} => isAddress(address) && ${
    isUnique
      ? `address === ${addressConsts[0]}`
      : `${category}List.some((${category}Address) => ${category}Address === address)`
  }`

const contractLabel = (
  category: string,
  addressType: string,
  contract: string,
  contractFactory: string,
) =>
  `export const ${category}Contract = (address: ${addressType}, signerOrProvider: Signer | Provider): ${contract} => ${contractFactory}.connect(address, signerOrProvider)`

const metadataTypeLabel = (
  category: string,
  addressType: string,
  metadataType: string,
) =>
  `export type ${capitalize(
    category,
  )}Metadata = Record<${addressType}, ${metadataType}>`

const metadataLabel = (
  category: string,
  addresses: zx.Address[],
  addressConstantsByAddress: Record<zx.Address, string>,
  metadataEntriesByAddress: Record<zx.Address, string>,
) => {
  let label = `export const ${category}Metadata: ${capitalize(
    category,
  )}Metadata = {\n`
  for (const address of addresses) {
    label += `[${addressConstantsByAddress[address]}]: ${metadataEntriesByAddress[address]},\n`
  }
  return label + `}`
}

export function generateFiles(
  categories: [string, ...string[]],
  fileDescriptionsByCategory: FileDescriptionsByCategory,
): Record<string, string> {
  const fileByCategory: Record<string, string> = {}

  let index = 'export * from "./address"\n'

  for (const category of categories) {
    const {
      addresses,
      contract,
      contractFactory,
      addressImports,
      addressConstantsByAddress,
      isUnique,
      addressType,
      metadataType,
      importBigNumber,
      metadataEntriesByAddress,
      hasMetadata,
    } = fileDescriptionsByCategory[category]

    const imports = [
      defaultImportLabel,
      ethersImportLabel(importBigNumber),
      contractFactoryImportLabel(contractFactory, contract),
      ...addressImports.map(addressImportLabel),
    ].join('\n')

    const addressConsts = addresses.map(
      (address) => addressConstantsByAddress[address],
    )

    const addressConstLabels = addresses
      .map((address) =>
        addressConstLabel(
          address,
          addressConstantsByAddress[address],
          addressType,
        ),
      )
      .join('\n')

    const addressList = !isUnique
      ? addressListLabel(category, addressConsts)
      : ''

    const file = [
      preamble,
      imports,
      addressTypeLabel(addressType),
      addressConstLabels,
      addressList,
      addressGuardLabel(category, addressType, isUnique, addressConsts),
      contractLabel(category, addressType, contract, contractFactory),
      hasMetadata ? metadataTypeLabel(category, addressType, metadataType) : '',
      hasMetadata
        ? metadataLabel(
            category,
            addresses,
            addressConstantsByAddress,
            metadataEntriesByAddress,
          )
        : '',
    ]
      .filter((s) => s !== '')
      .join('\n\n')

    index += `export * from "./${category}"\n`

    fileByCategory[category] = prettier.format(file, {
      parser: 'typescript',
      printWidth: 80,
      tabWidth: 2,
      semi: false,
      trailingComma: 'all',
    })
    log(`\nFile %s:\n%s`, category, file)
  }

  fileByCategory['index'] = prettier.format(index, {
    parser: 'typescript',
    printWidth: 80,
    tabWidth: 2,
    semi: false,
    trailingComma: 'all',
  })

  return fileByCategory
}
