import { SonraDataModel, SonraModel } from '../types'
import { capitalize } from '../utils'
import prettier from 'prettier'

const preamble = `
// THIS FILE IS AUTOGENERATED - DO NOT EDIT

`
const genImports = (contractFactory: string) => `
import { Address, Generic, isAddress } from "./address"
import { ${contractFactory} } from "./contracts"
import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";

`
const genGenericAddressType = (category: string) => {
  const categoryAddressType = capitalize(category)
  return `export type Generic${categoryAddressType}Address = GenericAddress & { readonly Generic${categoryAddressType}Address: unique symbol }\n`
}

const genAddressType = (category: string) => {
  const categoryAddressType = capitalize(category)
  return `export type ${categoryAddressType}Address<T extends string> = Address<T> & { readonly ${categoryAddressType}Address: unique symbol }\n`
}

const genAddressConstants = (category: string, data: [string, string][]) => {
  let constantsStr = ''
  for (const [varLabel, address] of data) {
    const categoryAddressType = capitalize(`${category}Address`)
    constantsStr += `const ${varLabel}: ${categoryAddressType}Address<${address}> = ${address}\n`
  }
  return constantsStr
}

const genAddressList = (category: string, addresses: string[]) => {
  const categoryAddressType = capitalize(`${category}Address`)

  return `export const ${category}Addresses: ${categoryAddressType}[] = [
${addresses.join(',\n')}
] as ${categoryAddressType}[]`
}

const genAddressGuard = (category: string) => {
  const categoryAddressType = capitalize(`${category}Address`)
  return `
export const is${categoryAddressType} = (address: string): address is ${categoryAddressType} => isAddress(address) && ${category}Addresses.some((${category}Address) => ${category}Address === address)
`
}

export function generateFiles(
  categories: [string, ...string[]],
  data: SonraDataModel<SonraModel>,
  categoryContractFactoryDict: { [k in string]: string },
): { [k in string]: string } {
  const categoryFileDict: Record<string, string> = {}

  for (const category of categories) {
    const categoryAddresses = data.addresses[category]

    const enumeratedAddresses = categoryAddresses.map((address) => [
      `${category}Address_${address.slice(0, 6)}`,
      address,
    ]) as [string, string][]

    // const categoryMetadata = data.metadata[category]
    //   ? `export const ${category}Metadata = ${JSON.stringify(
    //       data.metadata[category],
    //     )} as const`
    //   : ''

    // const declaredAddresses = enumeratedAddresses
    //   .map(([name, address]) => `const ${name} = '${address}' as const`)
    //   .join('\n')

    const file = `
${preamble}
${genImports(categoryContractFactoryDict[category])}
${genGenericAddressType(category)}
${genAddressType(category)}
${genAddressConstants(category, enumeratedAddresses)}
${genAddressList(category, data.addresses[category])}
${genAddressGuard}
`
    // export const ${category}Contract = (address: ${addressType}, signerOrProvider: Signer | Provider) => ${
    //       categoryContractFactoryDict[category]
    //     }.connect(address, signerOrProvider)
    categoryFileDict[category] = prettier.format(file, {
      parser: 'typescript',
      printWidth: 80,
      tabWidth: 2,
      semi: false,
      trailingComma: 'all',
    })
  }

  return categoryFileDict
}
