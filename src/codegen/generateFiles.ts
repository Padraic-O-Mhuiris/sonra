import { SonraDataModel, SonraModel } from '../types'
import { capitalize } from '../utils'
import prettier from 'prettier'

export function generateFiles(
  categories: [string, ...string[]],
  data: SonraDataModel<SonraModel>,
  categoryContractFactoryDict: { [k in string]: string },
): { [k in string]: string } {
  const categoryFileDict: Record<string, string> = {}

  for (const category of categories) {
    const categoryAddresses = data.addresses[category]
    const addressType = capitalize(`${category}Address`)

    const enumeratedAddresses = categoryAddresses.map((address, idx) => [
      `${category}Address_${idx}`,
      address,
    ])

    const declaredAddresses = enumeratedAddresses
      .map(([name, address]) => `const ${name} = '${address}' as const`)
      .join('\n')

    const file = `
// THIS FILE IS AUTOGENERATED - DO NOT EDIT
import { Address, isAddress } from "./address"
import { ${categoryContractFactoryDict[category]} } from "./contracts"

export type ${addressType} = Address & { readonly ${addressType}: unique symbol }

export const ${category}Addresses: ${addressType}[] = ${JSON.stringify(
      categoryAddresses,
    )} as ${addressType}[]

export const is${addressType} = (address: string): address is ${addressType} => isAddress(address) && ${category}Addresses.some((${category}Address) => ${category}Address === address)

export const ${category}Metadata = ${JSON.stringify(
      data.metadata[category],
    )} as const
`
    categoryFileDict[category] = prettier.format(file, {
      parser: 'typescript',
      printWidth: 80,
      tabWidth: 2,
      semi: false,
      trailingComma: 'all',
    })
  }

  return categoryFileDict
}
