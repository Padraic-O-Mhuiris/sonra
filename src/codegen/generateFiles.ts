import prettier from 'prettier'
import { SonraDataModel, SonraModel } from '../schema'
import { capitalize } from '../utils'

const preamble = `
// THIS FILE IS AUTOGENERATED - DO NOT EDIT

`
const genImports = (contractFactory: string) => `
import { Address, GenericAddress, isAddress } from "./address"
import { ${contractFactory} } from "./contracts"
import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";

`

const genAddressConstants = (category: string, data: [string, string][]) => {
  let constantsStr = ''
  for (const [varLabel, address] of data) {
    constantsStr += `const ${varLabel} = '${address}' as Address<'${address}'>\n`
  }
  return constantsStr
}

const genAddressArrayType = (category: string, data: [string, string][]) => {
  const categoryAddressType = capitalize(category)
  let union = `export type ${categoryAddressType}Addresses =[\n`
  for (const [_, address] of data) {
    union += `  Address<'${address}'>,\n`
  }

  return `${union}]`
}

const genAddressType = (category: string) => {
  const categoryAddressType = `${capitalize(category)}Address`
  return `\nexport type ${categoryAddressType} = ${categoryAddressType}es[number]`
}

const genAddressArray = (category: string, data: [string, string][]) => {
  const categoryAddressType = capitalize(category)
  let arr = `
export const ${category}Addresses: ${categoryAddressType}Addresses = [\n`
  for (const [varLabel] of data) {
    arr += `${varLabel},\n`
  }

  return `${arr}]\n`
}

const genAddressGuard = (category: string) => {
  const categoryAddressType = capitalize(`${category}Address`)
  return `
export const is${categoryAddressType} = (address: string): address is ${categoryAddressType} => isAddress(address) &&
${category}Addresses.some((${category}Address) => ${category}Address.toLowerCase() === address.toLowerCase())
`
}

const genContractFn = (category: string, contractFactory: string) => {
  const categoryAddressType = capitalize(`${category}Address`)
  return `export const ${category}Contract = (address: ${categoryAddressType}, signerOrProvider: Signer | Provider) => ${contractFactory}.connect(address, signerOrProvider)`
}

const genContractMetadata = (
  category: string,
  data: SonraDataModel<SonraModel>,
) => {
  let metadataConstants = ''
  let metadataInterface = ''
  let metadataConst = ''
  for (const address of data.addresses[category]) {
    const addressData = data.metadata[category][address] ?? null
    const addressPostFix = address.slice(0, 6)
    const metadataName = `${category}Metadata_${addressPostFix}`
    const addressName = `${category}Address_${addressPostFix}`
    const metadataTypeName = capitalize(metadataName)
    metadataConstants += `const ${metadataName} = ${JSON.stringify(
      addressData,
      null,
      2,
    )} as const
type ${metadataTypeName} = {
  [k in Address<'${address}'>]: typeof ${metadataName}
}\n\n`

    metadataInterface += `\n${metadataTypeName} &`
    metadataConst += `  [${addressName}]: ${metadataName},\n`
  }
  return `
${metadataConstants}

export type ${capitalize(category)}Metadata = {
[k in ${capitalize(category)}Address]: ${metadataInterface.slice(0, -1)}
}

export const ${category}Metadata = {
${metadataConst}
}`
}

export function generateFiles(
  categories: [string, ...string[]],
  data: SonraDataModel<SonraModel>,
  categoryContractFactoryDict: { [k in string]: string },
): { [k in string]: string } {
  const categoryFileDict: Record<string, string> = {}

  for (const category of categories) {
    const categoryAddresses = data.addresses[category]

    const enumeratedAddresses = categoryAddresses.map((address) => [
      `${category}Address_${address.slice(0, 6)}`,
      address,
    ]) as [string, string][]

    // const categoryMetadata = data.metadata[category]
    //   ? `export const ${category}Metadata = ${JSON.stringify(
    //       data.metadata[category],
    //     )} as const`
    //   : ''

    // const declaredAddresses = enumeratedAddresses
    //   .map(([name, address]) => `const ${name} = '${address}' as const`)
    //   .join('\n')

    const file = `
${preamble}
${genImports(categoryContractFactoryDict[category])}
${genAddressConstants(category, enumeratedAddresses)}
${genAddressArrayType(category, enumeratedAddresses)}
${genAddressType(category)}
${genAddressArray(category, enumeratedAddresses)}
${genAddressGuard(category)}
${genContractFn(category, categoryContractFactoryDict[category])}
${genContractMetadata(category, data)}
`
    categoryFileDict[category] = prettier.format(file, {
      parser: 'typescript',
      printWidth: 100,
      tabWidth: 2,
      semi: false,
      trailingComma: 'all',
    })
  }

  return categoryFileDict
}
